grammar of C++
<Program> ::= <PreprocessorDirective>* <Declaration>*

<PreprocessorDirective> ::= "#include" <IncludeFile> | "#ifndef" <Identifier> "#define" <Identifier> "..." "#endif"
<IncludeFile> ::= "<" <Identifier> ">" | "\"" <Identifier> "\""
<Identifier> ::= [a-zA-Z_][a-zA-Z0-9_]*

<Declaration> ::= <VariableDeclaration> | <FunctionDeclaration> | <ClassDeclaration>

<VariableDeclaration> ::= <Type> <Identifier> ";"
<FunctionDeclaration> ::= <Type> <Identifier> "(" <ParameterList> ")" <FunctionBody>
<ClassDeclaration> ::= "class" <Identifier> "{" <ClassMember>* "}"
<ClassMember> ::= <VariableDeclaration> | <FunctionDeclaration>

<Type> ::= "int" | "float" | "char" | "bool" | <ClassType>
<ClassType> ::= <Identifier>

<FunctionBody> ::= "{" <Statement>* "}"

<Statement> ::= <ExpressionStatement> | <IfStatement> | <ForStatement> | <ReturnStatement>
<ExpressionStatement> ::= <Expression> ";"
<IfStatement> ::= "if" "(" <Expression> ")" <Statement> ("else" <Statement>)?
<ForStatement> ::= "for" "(" <ExpressionStatement> <ExpressionStatement> <Expression> ")" <Statement>
<ReturnStatement> ::= "return" <Expression> ";"

<Expression> ::= <PrimaryExpression> | <Expression> "+" <Expression> | <Expression> "-" <Expression> 
             | <Expression> "*" <Expression> | <Expression> "/" <Expression>
<PrimaryExpression> ::= <Identifier> | <Literal> | "(" <Expression> ")"
<Literal> ::= <IntegerLiteral> | <FloatLiteral> | <BooleanLiteral>
<IntegerLiteral> ::= [0-9]+
<FloatLiteral> ::= [0-9]+ "." [0-9]+
<BooleanLiteral> ::= "true" | "false"

<Operator> ::= "+" | "-" | "*" | "/" | "==" | "!=" | "<" | ">" | "<=" | ">=" | "&&" | "||"

