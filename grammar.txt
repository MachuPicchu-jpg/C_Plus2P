grammar of C++
<Program> ::= <PreprocessorDirective>* <Declaration>*

<PreprocessorDirective> ::= "#include" <IncludeFile> | "#ifndef" <Identifier> "#define" <Identifier> "..." "#endif"
<IncludeFile> ::= "<" <Identifier> ">" | "\"" <Identifier> "\""
<Identifier> ::= [a-zA-Z_][a-zA-Z0-9_]*
<Literal> ::= <IntegerLiteral> | <FloatLiteral> | <BooleanLiteral> | <StringLiteral>
<IntegerLiteral> ::= [0-9]+
<FloatLiteral> ::= [0-9]+ "." [0-9]+
<BooleanLiteral> ::= "true" | "false"
<StringLiteral> ::= "\"" [^"\n]* "\""

<Declaration> ::= <VariableDeclaration> | <FunctionDeclaration> | <ClassDeclaration> | <StructDeclaration> | <EnumDeclaration> | <TypedefDeclaration> | <NamespaceDeclaration>

<VariableDeclaration> ::= <Type> <Identifier> ";" | <Type> <Identifier> "=" <Expression> ";"
<FunctionDeclaration> ::= <Type> <Identifier> "(" <ParameterList>? ")" <FunctionBody>
<ClassDeclaration> ::= "class" <Identifier> "{" <ClassMember>* "}"
<StructDeclaration> ::= "struct" <Identifier> "{" <StructMember>* "}"
<EnumDeclaration> ::= "enum" <Identifier> "{" <EnumMember> ("," <EnumMember>)* "}"
<TypedefDeclaration> ::= "typedef" <Type> <Identifier> ";"
<NamespaceDeclaration> ::= "namespace" <Identifier> "{" <Declaration>* "}"

<ClassMember> ::= <VariableDeclaration> | <FunctionDeclaration> | <AccessSpecifier> ":" <ClassMember>*
<StructMember> ::= <VariableDeclaration> | <FunctionDeclaration>
<EnumMember> ::= <Identifier> ("=" <IntegerLiteral>)?

<AccessSpecifier> ::= "public" | "private" | "protected"

<Type> ::= "int" | "float" | "char" | "bool" | "void" | <ClassType> | <PointerType> | <ReferenceType> | <ArrayType>
<PointerType> ::= <Type> "*"
<ReferenceType> ::= <Type> "&"
<ArrayType> ::= <Type> "[" <IntegerLiteral> "]"
<ClassType> ::= <Identifier>

<ParameterList> ::= <Parameter> ("," <Parameter>)*
<Parameter> ::= <Type> <Identifier>

<FunctionBody> ::= "{" <Statement>* "}"

<Statement> ::= <ExpressionStatement> | <IfStatement> | <ForStatement> | <WhileStatement> | <DoWhileStatement> | <ReturnStatement> | <CompoundStatement> | <SwitchStatement> | <BreakStatement> | <ContinueStatement>
<ExpressionStatement> ::= <Expression> ";"
<IfStatement> ::= "if" "(" <Expression> ")" <Statement> ("else" <Statement>)?
<ForStatement> ::= "for" "(" <ExpressionStatement>? <Expression>? ";" <Expression>? ")" <Statement>
<WhileStatement> ::= "while" "(" <Expression> ")" <Statement>
<DoWhileStatement> ::= "do" <Statement> "while" "(" <Expression> ")" ";"
<ReturnStatement> ::= "return" <Expression>? ";"
<CompoundStatement> ::= "{" <Statement>* "}"
<SwitchStatement> ::= "switch" "(" <Expression> ")" "{" <SwitchCase>* "}"
<SwitchCase> ::= "case" <IntegerLiteral> ":" <Statement>* | "default" ":" <Statement>*
<BreakStatement> ::= "break" ";"
<ContinueStatement> ::= "continue" ";"

<Expression> ::= <PrimaryExpression> | <Expression> <Operator> <Expression> | <UnaryOperator> <Expression> | <Expression> <PostfixOperator>
<PrimaryExpression> ::= <Identifier> | <Literal> | "(" <Expression> ")" | <FunctionCall>
<FunctionCall> ::= <Identifier> "(" <ArgumentList>? ")"
<ArgumentList> ::= <Expression> ("," <Expression>)*
<UnaryOperator> ::= "-" | "!" | "++" | "--"
<PostfixOperator> ::= "++" | "--"
<Operator> ::= "+" | "-" | "*" | "/" | "%" | "==" | "!=" | "<" | ">" | "<=" | ">=" | "&&" | "||" | "=" | "+=" | "-=" | "*=" | "/=" | "%="
